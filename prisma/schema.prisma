// Prisma schema for SQLite

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Frequency {
  D
  W
  M
  Q
  Y
}

enum OccurrenceStatus {
  pending
  processing
  completed
  failed
}

model Task {
  id          String    @id @default(cuid())
  task        String
  description String
  frequency   Frequency
  displayDay  Json      // number[]
  deadline    Json      // number[]
  status      String    @default("pending") // "pending" | "processing" | "completed" | "failed"
  assignedTo  String    @default("")
  comment     String    @default("")
  ownerId     String    // Foreign key to User

  occurrences TaskOccurrence[]
  owner       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  @@index([frequency])
  @@index([ownerId])
}

model TaskOccurrence {
  id            String            @id @default(cuid())
  taskId        String
  dateUTC       DateTime          // midnight UTC
  status        OccurrenceStatus  @default(pending)
  assigneeId    String?
  assigneeName  String?
  comment       String?
  completedAt   DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  ownerId       String            // Foreign key to User
  
  task          Task              @relation(fields: [taskId], references: [id], onDelete: Cascade)
  owner         User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  @@unique([taskId, dateUTC])
  @@index([dateUTC])
  @@index([assigneeId])
  @@index([ownerId])
}

// Auth.js models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("member")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  occurrences   TaskOccurrence[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}




